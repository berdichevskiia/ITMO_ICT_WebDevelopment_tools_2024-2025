{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043c\u043e\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p>"},{"location":"lw-1/lab-1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161: \u0412\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 Docker \u0438 Alembic","text":""},{"location":"lw-1/lab-1/#_1","title":"\ud83d\udcd8 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u041f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 Python-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Docker, FastAPI \u0438 Alembic \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u0441\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 <code>app/</code>, \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>Dockerfile</code> \u0438 <code>docker-compose</code>.</p>"},{"location":"lw-1/lab-1/#_2","title":"\ud83d\udcc1 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<pre><code>lr1/\n\u251c\u2500\u2500 .env                  # \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\u251c\u2500\u2500 Dockerfile            # \u0421\u0431\u043e\u0440\u043a\u0430 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u251c\u2500\u2500 docker-compose.yaml  # \u041a\u043e\u043c\u043f\u043e\u043d\u043e\u0432\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n\u251c\u2500\u2500 requirements.txt      # Python-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\n\u251c\u2500\u2500 alembic.ini           # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Alembic\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 main.py           # \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0443\u043b\u044c FastAPI\n\u2502   \u251c\u2500\u2500 database.py       # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414\n\u2502   \u251c\u2500\u2500 start.sh          # \u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\n\u2502   \u2514\u2500\u2500 repositories/     # \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n</code></pre>"},{"location":"lw-1/lab-1/#_3","title":"\ud83d\ude80 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a","text":""},{"location":"lw-1/lab-1/#_4","title":"\ud83d\udd27 \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"lw-1/lab-1/#_5","title":"\u25b6\ufe0f \u0417\u0430\u043f\u0443\u0441\u043a","text":"<pre><code># \u041a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n$ git clone &lt;repo-url&gt;\n$ cd lr1\n\n# \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n$ cp .env.example .env\n\n# \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435\n$ docker-compose up --build\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: http://localhost:8000</p>"},{"location":"lw-1/lab-1/#_6","title":"\ud83e\udde9 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430","text":""},{"location":"lw-1/lab-1/#mainpy","title":"\ud83d\udcc4 <code>main.py</code>","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, World!\"}\n</code></pre> <p>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP GET \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 JSON-\u043e\u0442\u0432\u0435\u0442 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043a\u043e\u0440\u043d\u044e API.</p>"},{"location":"lw-1/lab-1/#databasepy","title":"\ud83d\uddc3 <code>database.py</code>","text":"<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(bind=engine)\n</code></pre> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lw-1/lab-1/#_7","title":"\ud83e\uddf1 \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438","text":""},{"location":"lw-1/lab-1/#user","title":"\ud83d\udc64 User","text":"<p>\u0424\u0430\u0439\u043b: <code>repositories/user.py</code> - \u041c\u0435\u0442\u043e\u0434\u044b: <code>get_by_email</code>, <code>get_by_username</code>, <code>create</code>, <code>update_password</code> - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c: <code>User</code></p> <pre><code>async def get_by_email(self, db, email):\n    result = await db.execute(select(User).filter(User.email == email))\n    return result.scalars().first()\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044f: <pre><code>hashed_password = get_password_hash(obj_in.password)\n</code></pre></p>"},{"location":"lw-1/lab-1/#task","title":"\ud83d\udccb Task","text":"<p>\u0424\u0430\u0439\u043b: <code>repositories/task.py</code> - \u041c\u0435\u0442\u043e\u0434: <code>get_by_event_id</code> - \u041c\u043e\u0434\u0435\u043b\u044c: <code>Task</code></p> <pre><code>statement = select(Task).filter(Task.event_id == event_id)\n</code></pre> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u043d\u0438\u0439, \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043a \u0441\u043e\u0431\u044b\u0442\u0438\u044e.</p>"},{"location":"lw-1/lab-1/#team","title":"\ud83d\udc65 Team","text":"<p>\u0424\u0430\u0439\u043b: <code>repositories/team.py</code> - \u041c\u0435\u0442\u043e\u0434\u044b: <code>get_event_teams</code>, <code>get_user_teams</code>, <code>get_by_user_event</code> - \u041c\u043e\u0434\u0435\u043b\u044c: <code>Team</code></p> <pre><code>select(Team).join(Registration).where(Registration.user_id == user.id)\n</code></pre> <p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044e.</p>"},{"location":"lw-1/lab-1/#event","title":"\ud83c\udf89 Event","text":"<p>\u0424\u0430\u0439\u043b: <code>repositories/event.py</code> - \u041c\u0435\u0442\u043e\u0434: <code>filter_events_by_dates</code> - \u041c\u043e\u0434\u0435\u043b\u044c: <code>Event</code></p> <pre><code>if from_date:\n    query = query.filter(self.model.dt_event_start &gt;= from_date)\n</code></pre> <p>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043f\u043e \u0434\u0430\u0442\u0430\u043c \u043d\u0430\u0447\u0430\u043b\u0430/\u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f/\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.</p>"},{"location":"lw-1/lab-1/#alembic","title":"\ud83d\udee0 \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 Alembic","text":""},{"location":"lw-1/lab-1/#alembic_1","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Alembic","text":"<pre><code>$ alembic init alembic\n</code></pre>"},{"location":"lw-1/lab-1/#_8","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","text":"<pre><code>$ alembic revision --autogenerate -m \"Initial migration\"\n</code></pre>"},{"location":"lw-1/lab-1/#_9","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439","text":"<pre><code>$ alembic upgrade head\n</code></pre>"},{"location":"lw-1/lab-1/#_10","title":"\ud83d\udcce \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<ul> <li>URL: <code>GET /</code></li> <li>\u041e\u0442\u0432\u0435\u0442: <code>{ \"message\": \"Hello, World!\" }</code></li> </ul> <p>\u041c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438\u043b\u0438 cURL: <pre><code>$ curl http://localhost:8000/\n</code></pre></p> <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439: https://github.com/berdichevskiia/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/lr1</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"lw-2/lw-2/","title":"\u21162: \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f (<code>task_1</code> \u0438 <code>task_2</code>), \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0435\u0448\u0430\u043b\u043e\u0441\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u0440\u0435\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0430 \u0432 Python: - <code>threading</code> \u2014 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, - <code>asyncio</code> \u2014 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, - <code>multiprocessing</code> \u2014 \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c.</p>"},{"location":"lw-2/lw-2/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":""},{"location":"lw-2/lw-2/#_1","title":"\u0426\u0435\u043b\u044c:","text":"<p>\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u0442\u0438\u043f\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0437\u0430\u0434\u0435\u0440\u0436\u0435\u043a \u0438\u043b\u0438 \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u0438 I/O).</p>"},{"location":"lw-2/lw-2/#_2","title":"\u041f\u043e\u0434\u0445\u043e\u0434\u044b:","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>threading</code> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a\u0438 \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f <code>threading</code> \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. <code>asyncio</code> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0438 <code>asyncio</code>-\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0434\u043b\u044f \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. <code>multiprocessing</code> \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u043a\u0430\u0436\u0434\u044b\u0439 \u0432 \u0441\u0432\u043e\u0435\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. <pre><code>import asyncio\nimport time\n\n\nasync def calculate_partial_sum(start: int, end: int) -&gt; int:\n    return sum(range(start, end + 1))\n\n\nasync def calculate_sum() -&gt; None:\n    start_time = time.time()\n\n    tasks = [\n        asyncio.create_task(calculate_partial_sum(1, 250000)),\n        asyncio.create_task(calculate_partial_sum(250001, 500000)),\n        asyncio.create_task(calculate_partial_sum(500001, 750000)),\n        asyncio.create_task(calculate_partial_sum(750001, 1000000)),\n    ]\n\n    results = await asyncio.gather(*tasks)\n    total_sum = sum(results)\n\n    print(\n        f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\\n\"\n        f\"\u0412\u0440\u0435\u043c\u044f: {time.time() - start_time}\"\n    )\n</code></pre> <pre><code>import multiprocessing\nimport time\n\n\ndef calculate_partial_sum(start: int, end: int) -&gt; int:\n    return sum(range(start, end + 1))\n\n\ndef calculate_sum() -&gt; None:\n    start_time = time.time()\n\n    with multiprocessing.Pool(processes=4) as pool:\n        results = pool.starmap(\n            calculate_partial_sum,\n            [(1, 250000), (250001, 500000), (500001, 750000), (750001, 1000000)]\n        )\n\n    total_sum = sum(results)\n\n    print(\n        f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\\n\"\n        f\"\u0412\u0440\u0435\u043c\u044f: {time.time() - start_time}\"\n    )\n</code></pre> <pre><code>import threading\nimport time\n\n\nclass SumThread(threading.Thread):\n    def __init__(self, start_value: int, end_value: int) -&gt; None:\n        super().__init__()\n        self.start_value = start_value\n        self.end_value = end_value\n        self.result = 0\n\n    def run(self) -&gt; None:\n        self.result = sum(range(self.start_value, self.end_value + 1))\n\n\ndef calculate_sum() -&gt; None:\n    start_time = time.time()\n\n    threads = [\n        SumThread(1, 250000),\n        SumThread(250001, 500000),\n        SumThread(500001, 750000),\n        SumThread(750001, 1000000),\n    ]\n\n    for thread in threads:\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    total_sum = 0\n    for thread in threads:\n        total_sum += thread.result\n\n    print(\n        f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\\n\"\n        f\"\u0412\u0440\u0435\u043c\u044f: {time.time() - start_time}\"\n    )\n</code></pre>"},{"location":"lw-2/lw-2/#_3","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Threading 2.3 \u0441\u0435\u043a Asyncio 1.5 \u0441\u0435\u043a Multiprocessing 3.1 \u0441\u0435\u043a \u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Threading 87.6503341999 \u0441\u0435\u043a Asyncio 427.726632000 \u0441\u0435\u043a Multiprocessing 454.2327093000 \u0441\u0435\u043a <p>\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041f\u043e\u0442\u043e\u043a\u0438 \u0443\u0434\u043e\u0431\u043d\u044b, \u043d\u043e \u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b \u043f\u0440\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0435\u043c I/O.</p>"},{"location":"lw-2/lw-2/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":""},{"location":"lw-2/lw-2/#_4","title":"\u0426\u0435\u043b\u044c:","text":"<p>\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e URL-\u0430\u0434\u0440\u0435\u0441\u0430\u043c \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 <code>SQLite</code>.</p>"},{"location":"lw-2/lw-2/#_5","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<ul> <li><code>urls.txt</code> \u2014 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a URL \u0434\u043b\u044f \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f.</li> <li><code>pages.db</code> \u2014 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 SQLite.</li> <li><code>db.py</code> \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443.</li> <li>\u0422\u0440\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438: <code>threading.py</code>, <code>async.py</code>, <code>multiprocessing.py</code>.</li> </ul> <pre><code>import sqlite3\n\ndef init_db():\n    conn = sqlite3.connect(\"pages.db\")\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS pages (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            url TEXT,\n            title TEXT\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\ndef save_to_db(url, title):\n    conn = sqlite3.connect(\"pages.db\")\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO pages (url, title) VALUES (?, ?)\", (url, title))\n    conn.commit()\n    conn.close()\n</code></pre> <pre><code>import aiohttp\nimport asyncio\nimport time\nfrom bs4 import BeautifulSoup\nfrom db import init_db, save_to_db\n\n\nasync def parse_and_save(session, url) :\n    try :\n        async with session.get(url) as response :\n            html = await response.text()\n            soup = BeautifulSoup(html, \"html.parser\")\n            title = soup.title.string.strip() if soup.title else \"No title\"\n            save_to_db(url, title)\n            print(f\"[Async] {url}: {title}\")\n    except Exception as e :\n        print(f\"[Async] Error parsing {url}: {e}\")\n\n\nasync def main() :\n    init_db()\n    with open(\"urls.txt\") as f :\n        urls = [line.strip() for line in f.readlines()]\n\n    start = time.time()\n    async with aiohttp.ClientSession() as session :\n        tasks = [parse_and_save(session, url) for url in urls]\n        await asyncio.gather(*tasks)\n    print(f\"Async completed in {time.time() - start:.2f}s\")\n\n\nif __name__ == \"__main__\" :\n    asyncio.run(main())\n</code></pre> <pre><code>from multiprocessing import Process\nimport time\nimport requests\nfrom bs4 import BeautifulSoup\nfrom db import init_db, save_to_db\n\n\ndef parse_and_save(url) :\n    try :\n        response = requests.get(url)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        title = soup.title.string.strip() if soup.title else \"No title\"\n        save_to_db(url, title)\n        print(f\"[Process] {url}: {title}\")\n    except Exception as e :\n        print(f\"[Process] Error parsing {url}: {e}\")\n\n\ndef main() :\n    init_db()\n    with open(\"urls.txt\") as f :\n        urls = [line.strip() for line in f.readlines()]\n\n    processes = []\n    start = time.time()\n    for url in urls :\n        p = Process(target=parse_and_save, args=(url,))\n        p.start()\n        processes.append(p)\n\n    for p in processes :\n        p.join()\n    print(f\"Multiprocessing completed in {time.time() - start:.2f}s\")\n\n\nif __name__ == \"__main__\" :\n    main()\n</code></pre> <pre><code>import threading\nimport time\nimport requests\nfrom bs4 import BeautifulSoup\nfrom db import init_db, save_to_db\n\n\ndef parse_and_save(url) :\n    try :\n        response = requests.get(url)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        title = soup.title.string.strip() if soup.title else \"No title\"\n        save_to_db(url, title)\n        print(f\"[Thread] {url}: {title}\")\n    except Exception as e :\n        print(f\"[Thread] Error parsing {url}: {e}\")\n\n\ndef main() :\n    init_db()\n    with open(\"urls.txt\") as f :\n        urls = [line.strip() for line in f.readlines()]\n\n    threads = []\n    start = time.time()\n    for url in urls :\n        t = threading.Thread(target=parse_and_save, args=(url,))\n        t.start()\n        threads.append(t)\n\n    for t in threads :\n        t.join()\n    print(f\"Threading completed in {time.time() - start:.2f}s\")\n\n\nif __name__ == \"__main__\" :\n    main()\n</code></pre>"},{"location":"lw-2/lw-2/#_6","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Threading 8.2 \u0441\u0435\u043a Asyncio 4.7 \u0441\u0435\u043a Multiprocessing 9.0 \u0441\u0435\u043a <p>\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441\u043d\u043e\u0432\u0430 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0441\u0430\u043c\u044b\u043c \u0431\u044b\u0441\u0442\u0440\u044b\u043c \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041f\u043e\u0442\u043e\u043a\u0438 \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0443\u043c\u0435\u0440\u0435\u043d\u043d\u043e, \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043f\u0440\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u0447\u0438\u0441\u043b\u0430 URL. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0440\u0430\u0434\u0430\u0442\u044c \u043e\u0442 \u0438\u0437\u043b\u0438\u0448\u043d\u0435\u0439 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.</p>"},{"location":"lw-2/lw-2/#_7","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<ul> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 I/O (\u0432\u0432\u043e\u0434/\u0432\u044b\u0432\u043e\u0434).</li> <li>\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u0430, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0441 GIL.</li> <li>\u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0441\u0442\u044c \u2014 \u043b\u0443\u0447\u0448\u0435 \u0434\u043b\u044f CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u043d\u043e \u0445\u0443\u0436\u0435 \u0434\u043b\u044f I/O-\u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a.</li> </ul>"},{"location":"lw-3/lw-3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163","text":""},{"location":"lw-3/lw-3/#_1","title":"\u0426\u0435\u043b\u044c","text":"<p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Celery \u0438 Redis.</p>"},{"location":"lw-3/lw-3/#1-fastapi-docker","title":"1. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 Docker","text":""},{"location":"lw-3/lw-3/#11-docker-composeyaml","title":"1.1 docker-compose.yaml","text":"<pre><code>version: \"3.9\"\n\nservices:\n  fastapi:\n    build:\n      context: .\n      dockerfile: docker/Dockerfile\n    ports:\n      - \"8000:8000\"\n    environment:\n      - CELERY_BROKER_URL=redis://redis:6379/0\n      - CELERY_RESULT_BACKEND=redis://redis:6379/0\n    depends_on:\n      - redis\n\n  celery_worker:\n    build:\n      context: .\n      dockerfile: docker/Dockerfile\n    command: celery -A app.celery_worker.celery_app worker --loglevel=info\n    environment:\n      - CELERY_BROKER_URL=redis://redis:6379/0\n      - CELERY_RESULT_BACKEND=redis://redis:6379/0\n    depends_on:\n      - redis\n\n  redis:\n    image: redis:alpine\n</code></pre>"},{"location":"lw-3/lw-3/#_2","title":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432","text":"<pre><code>@app.post(\"/parse-direct\")\ndef parse_direct(url: str):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return {\"message\": \"Parsed directly\", \"length\": len(response.text)}\n    except requests.RequestException as e:\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre>"},{"location":"lw-3/lw-3/#_3","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432","text":"<pre><code>@app.post(\"/parse-async\")\ndef parse_async(url: str):\n    task = parse_url_task.delay(url)\n    return {\"message\": \"Parsing started\", \"task_id\": task.id}\n</code></pre>"},{"location":"lw-3/lw-3/#_4","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430","text":"<pre><code>import requests\n\ndef fetch_page_content(url: str) -&gt; str:\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.text\n</code></pre>"},{"location":"lw-3/lw-3/#celery","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Celery","text":"<pre><code>from celery import Celery\nfrom app.parser import fetch_page_content\nimport os\n\ncelery_app = Celery(\n    \"tasks\",\n    broker=os.environ.get(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"),\n    backend=os.environ.get(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\")\n)\n\n@celery_app.task\ndef parse_url_task(url: str):\n    content = fetch_page_content(url)\n    return f\"Parsed {len(content)} characters\"\n</code></pre>"},{"location":"lw-3/lw-3/#celery-worker","title":"Celery Worker","text":"<pre><code>from app.tasks import celery_app\n\n# \u0412\u044b\u0437\u043e\u0432 \u0438\u0437 docker:\n# celery -A app.celery_worker.celery_app worker --loglevel=info\n</code></pre>"}]}